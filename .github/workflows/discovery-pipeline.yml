name: CI/CD Discovery Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        working-directory: services/discovery
        run: mvn clean package -DskipTests

      - name: Archive JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: discovery.jar
          path: services/discovery/target/*.jar

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Important for SonarCloud

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run unit tests
        working-directory: services/discovery
        run: mvn test

      - name: SonarCloud Analysis
        working-directory: services/discovery
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn verify sonar:sonar \
            -Dsonar.projectKey=Zeineb2001_PFE_project \
            -Dsonar.organization=zeineb2001 \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.java.binaries=target

  push:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        working-directory: services/discovery
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/discovery:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/discovery:latest

  deploy:
    runs-on: ubuntu-latest
    needs: push

    steps:
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          kubectl-version: 'v1.24.7'

      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Update Helm values.yaml with new Docker image
        run: |
          # Update the values.yaml file with the new Docker image
          sed -i 's|image: .*|image: ${{ secrets.DOCKER_USERNAME }}/discovery:latest|' App-chart/values.yaml

      - name: Commit changes to Git repository
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add App-chart/values.yaml
          git commit -m "Update discovery image to latest version"
          git push origin main

      - name: Get ArgoCD admin password
        id: get-argocd-password
        run: |
          # Retrieve ArgoCD admin password from the secret
          PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode)
          echo "::set-output name=password::$PASSWORD"
          
      - name: Port-forward to access ArgoCD UI
        run: |
          kubectl port-forward svc/argocd-server -n argocd 8085:80 &
          sleep 5  # Wait for the port-forward to be active
          echo "ArgoCD UI accessible at http://localhost:8085"  # Indicate access URL

      - name: Display message to user
        run: |
          echo "Please log in to ArgoCD at http://localhost:8085 with username 'admin' and the retrieved password."

      - name: Check the status of the pods
        run: |
          # Check the status of the pods in the default namespace
          kubectl get pods -n default

      - name: Check the logs of discovery pod
        run: |
          # Check the logs of the discovery pod to debug if necessary
          kubectl logs -n default -l app=discovery  # Replace with your pod's label selector

      - name: Wait for pods to be ready
        run: |
          # Wait until the discovery deployment is fully rolled out
          kubectl rollout status deployment/discovery -n default







