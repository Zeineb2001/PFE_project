name: CI/CD Discovery Pipeline

on:
  push:
    branches:
      - main  # Déclenche le pipeline quand un commit est poussé dans la branche main
  pull_request:
    branches:
      - main  # Déclenche le pipeline pour les pull requests vers main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        working-directory: services/discovery
        run: mvn clean package -DskipTests

      - name: Archive JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: discovery.jar
          path: services/discovery/target/*.jar

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Important for SonarCloud

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run unit tests
        working-directory: services/discovery
        run: mvn test

      - name: SonarCloud Analysis
        working-directory: services/discovery
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn verify sonar:sonar \
            -Dsonar.projectKey=Zeineb2001_PFE_project \
            -Dsonar.organization=zeineb2001 \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.java.binaries=target

  push:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        working-directory: services/discovery
        run: |
          # Build and push Docker image to DockerHub
          docker build -t ${{ secrets.DOCKER_USERNAME }}/discovery:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/discovery:latest

  deploy:
    runs-on: ubuntu-latest
    needs: push

    steps:
      - name: Set up kubeconfig for K3s
        run: |
          # Créer le répertoire kubeconfig
          mkdir  ${HOME}/.kube

          # Copier le fichier kubeconfig du secret GitHub dans le répertoire kubeconfig
          echo "${{ secrets.KUBE_CONFIG }}" > ${HOME}/.kube/config
          
          # Vérifier que la mise à jour du fichier kubeconfig a bien été effectuée
          cat ${HOME}/.kube/config  

          # Définir la variable d'environnement KUBECONFIG pour forcer kubectl à utiliser le bon fichier kubeconfig
          export KUBECONFIG=~/.kube/config

          # Vérifier que kubectl peut accéder à la configuration et au cluster K3s
          kubectl config view
          kubectl get nodes  

      - name: Checkout the code repository
        uses: actions/checkout@v3
        with:
          repository: Zeineb2001/PFE_project  

      - name: Clone PFE_project_deploy repository
        uses: actions/checkout@v3
        with:
          repository: Zeineb2001/PFE_project_deploy 
          path: PFE_project_deploy  

      - name: Update Helm values.yaml with new Docker image
        run: |
          # Mettre à jour le fichier values.yaml dans le dépôt PFE_project_deploy avec la nouvelle image Docker
          sed -i 's|image: .*|image: ${{ secrets.DOCKER_USERNAME }}/discovery:latest|' PFE_project_deploy/App-chart/values.yaml

      - name: Check if there are changes to commit
        run: |
          cd PFE_project_deploy
          git diff --exit-code App-chart/values.yaml  # Si aucune modification, retourne un code de sortie 0
          if [ $? -ne 0 ]; then
            git add App-chart/values.yaml
            git commit -m "Update discovery image to latest version"
            git push origin main  # Pousser les modifications vers PFE_project_deploy
          else
            echo "No changes to commit"
          fi

      - name: Get ArgoCD admin password
        id: get-argocd-password
        run: |
          PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode)
          echo "::set-output name=password::$PASSWORD"

      - name: Port-forward to access ArgoCD UI
        run: |
          kubectl port-forward svc/argocd-server -n argocd 8085:80 &
          sleep 5
          echo "ArgoCD UI accessible at http://localhost:8085"  # Indicate access URL

      - name: Display message to user
        run: |
          echo "Please log in to ArgoCD at http://localhost:8085 with username 'admin' and the retrieved password."

      - name: Check the status of the pods
        run: |
          kubectl get pods -n default

      - name: Check the logs of discovery pod
        run: |
          kubectl logs -n default -l app=discovery

      - name: Wait for pods to be ready
        run: |
          kubectl rollout status deployment/discovery -n default











