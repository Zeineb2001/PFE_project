name: CI/CD product pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
     
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        working-directory: services/product
        run: mvn clean package -DskipTests

      - name: Archive JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: product.jar
          path: services/product/target/*.jar

  test:
    runs-on: ubuntu-latest
    needs: build

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: alibou
          POSTGRES_PASSWORD: alibou
          POSTGRES_DB: postgres
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Wait for Postgres to be ready
        run: sleep 20

      - name: Create product database
        run: |
          PGPASSWORD=alibou psql -h localhost -U alibou -d postgres -c "CREATE DATABASE product;"

      - name: Run unit tests
        working-directory: services/product
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/product
          SPRING_DATASOURCE_USERNAME: alibou
          SPRING_DATASOURCE_PASSWORD: alibou
        run: mvn test

      - name: SonarCloud Analysis
        working-directory: services/product
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn verify sonar:sonar \
            -Dsonar.projectKey=Zeineb2001_PFE_project \
            -Dsonar.organization=zeineb2001 \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.java.binaries=target
            
      # Ajouter l'étape JMeter après les tests unitaires
      - name: Install JMeter
        run: |
          wget https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.6.3.tgz
          tar -xvzf apache-jmeter-5.6.3.tgz
      - name: Run JMeter Performance Test
        run: |
          # Créer les répertoires de sortie si nécessaire
          mkdir -p results/report
          # Exécuter les tests de performance avec JMeter en mode non interactif
          ./apache-jmeter-5.6.3/bin/jmeter -n -t services/test-plan.jmx -l results/result.jtl -e -o results/report

      - name: Upload JMeter Results
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results
          path: |
            results/result.jtl  # Résultats bruts des tests
            results/report       # Rapport HTML généré par JMeter

      - name: View JMeter HTML Report
        run: |
          echo "JMeter report is available at: $(pwd)/results/report/index.html"
